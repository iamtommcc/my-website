@charset "UTF-8";
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/* Links
–––––––––––––––––––––––––––––––––––––––––––––––––– */
a {
  color: #1EAEDB; }

a:hover {
  color: #0FA0CE; }

.container {
  zoom: 1;
  max-width: 1300px;
  margin: 0 auto; }
  .container:before, .container:after {
    content: "\0020";
    display: block;
    height: 0;
    overflow: hidden; }
  .container:after {
    clear: both; }
  *, *:before, *:after {
    box-sizing: border-box; }

/* Buttons
–––––––––––––––––––––––––––––––––––––––––––––––––– */
.button,
button,
input[type="submit"],
input[type="reset"],
input[type="button"] {
  display: inline-block;
  height: 38px;
  padding: 0 30px;
  color: #555;
  text-align: center;
  font-size: 11px;
  font-weight: 600;
  line-height: 38px;
  letter-spacing: .1rem;
  text-transform: uppercase;
  text-decoration: none;
  white-space: nowrap;
  background-color: transparent;
  border-radius: 4px;
  border: 1px solid #bbb;
  cursor: pointer;
  box-sizing: border-box; }

.button:hover,
button:hover,
input[type="submit"]:hover,
input[type="reset"]:hover,
input[type="button"]:hover,
.button:focus,
button:focus,
input[type="submit"]:focus,
input[type="reset"]:focus,
input[type="button"]:focus {
  color: #333;
  border-color: #888;
  outline: 0; }

.button.button-primary,
button.button-primary,
input[type="submit"].button-primary,
input[type="reset"].button-primary,
input[type="button"].button-primary {
  color: #FFF;
  background-color: #33C3F0;
  border-color: #33C3F0; }

.button.button-primary:hover,
button.button-primary:hover,
input[type="submit"].button-primary:hover,
input[type="reset"].button-primary:hover,
input[type="button"].button-primary:hover,
.button.button-primary:focus,
button.button-primary:focus,
input[type="submit"].button-primary:focus,
input[type="reset"].button-primary:focus,
input[type="button"].button-primary:focus {
  color: #FFF;
  background-color: #1EAEDB;
  border-color: #1EAEDB; }

/* Forms
–––––––––––––––––––––––––––––––––––––––––––––––––– */
input[type="email"],
input[type="number"],
input[type="search"],
input[type="text"],
input[type="tel"],
input[type="url"],
input[type="password"],
textarea,
select {
  height: 38px;
  padding: 6px 10px;
  /* The 6px vertically centers text on FF, ignored by Webkit */
  background-color: #fff;
  border: 1px solid #D1D1D1;
  border-radius: 4px;
  box-shadow: none;
  box-sizing: border-box; }

/* Removes awkward default styles on some inputs for iOS */
input[type="email"],
input[type="number"],
input[type="search"],
input[type="text"],
input[type="tel"],
input[type="url"],
input[type="password"],
textarea {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none; }

textarea {
  min-height: 65px;
  padding-top: 6px;
  padding-bottom: 6px; }

input[type="email"]:focus,
input[type="number"]:focus,
input[type="search"]:focus,
input[type="text"]:focus,
input[type="tel"]:focus,
input[type="url"]:focus,
input[type="password"]:focus,
textarea:focus,
select:focus {
  border: 1px solid #33C3F0;
  outline: 0; }

label,
legend {
  display: block;
  margin-bottom: .5rem;
  font-weight: 600; }

fieldset {
  padding: 0;
  border-width: 0; }

input[type="checkbox"],
input[type="radio"] {
  display: inline; }

label > .label-body {
  display: inline-block;
  margin-left: .5rem;
  font-weight: normal; }

/* Lists
–––––––––––––––––––––––––––––––––––––––––––––––––– */
ul {
  list-style: disc inside; }

ol {
  list-style: decimal inside; }

ol, ul {
  padding-left: 0;
  margin-top: 0; }

ul ul,
ul ol,
ol ol,
ol ul {
  margin: 1.5rem 0 1.5rem 3rem;
  font-size: 90%; }

li {
  margin-bottom: 1rem; }

/* Code
–––––––––––––––––––––––––––––––––––––––––––––––––– */
code {
  padding: .2rem .5rem;
  margin: 0 .2rem;
  font-size: 90%;
  white-space: nowrap;
  background: #F1F1F1;
  border: 1px solid #E1E1E1;
  border-radius: 4px; }

pre > code {
  display: block;
  padding: 1rem 1.5rem;
  white-space: pre; }

/* Tables
–––––––––––––––––––––––––––––––––––––––––––––––––– */
th,
td {
  padding: 12px 15px;
  text-align: left;
  border-bottom: 1px solid #E1E1E1; }

th:first-child,
td:first-child {
  padding-left: 0; }

th:last-child,
td:last-child {
  padding-right: 0; }

/* Spacing
–––––––––––––––––––––––––––––––––––––––––––––––––– */
button,
.button {
  margin-bottom: 1rem; }

input,
textarea,
select,
fieldset {
  margin-bottom: 1.5rem; }

pre,
blockquote,
dl,
figure,
table,
p,
ul,
ol,
form {
  margin-bottom: 2.5rem; }

/* Utilities
–––––––––––––––––––––––––––––––––––––––––––––––––– */
.u-full-width {
  width: 100%;
  box-sizing: border-box; }

.u-max-full-width {
  max-width: 100%;
  box-sizing: border-box; }

.u-pull-right {
  float: right; }

.u-pull-left {
  float: left; }

/* Misc
–––––––––––––––––––––––––––––––––––––––––––––––––– */
hr {
  margin-top: 3rem;
  margin-bottom: 3.5rem;
  border-width: 0;
  border-top: 1px solid #E1E1E1; }

html {
  font-size: 62.5%;
  position: relative;
  min-height: 100%;
  font-family: 'nudista-web', 'DIN', sans-serif;
  color: #495258; }
  @media (min-width: 0) and (max-width: 36em) {
    html {
      font-size: 50%; } }

body {
  font-size: 2rem;
  /* currently ems cause chrome bug misinterpreting rems on body element */
  line-height: 1.6;
  font-weight: 400;
  margin-bottom: 12em; }

p {
  margin-top: 0; }

.interface-header {
  font-size: 1em;
  text-transform: uppercase;
  letter-spacing: 1px;
  color: #7c60cb; }

h1, h2, h3, h4, h5, h6 {
  font-family: 'nudista-web', Arial, sans-serif;
  margin-top: 1px;
  margin-bottom: 2rem;
  font-weight: 700; }

h1 {
  font-size: 5.9rem;
  line-height: 1.2; }

h2 {
  font-size: 4.0rem;
  line-height: 1.25; }

h3 {
  font-size: 3.6rem;
  line-height: 1.3; }

h4 {
  font-size: 3.0rem;
  line-height: 1.35; }

h5 {
  font-size: 2.4rem;
  line-height: 1.5; }

h6 {
  font-size: 1.5rem;
  line-height: 1.6;
  letter-spacing: 0; }

.main-header {
  height: 4em;
  margin-bottom: -4em;
  top: 0;
  position: relative;
  z-index: 2; }

.main-header__logo {
  width: 75px;
  height: 34px;
  display: block;
  margin: 0 auto 10px auto;
  background: url("/images/logo.svg");
  background-size: 100%;
  background-repeat: no-repeat; }
  @media (min-width: 36.0625em) {
    .main-header__logo {
      width: 100px;
      float: left;
      height: 44px;
      position: relative;
      top: -3px;
      margin-bottom: 0;
      margin-right: 1.5em; } }

.main-header__nav {
  width: 100%;
  position: absolute;
  float: none;
  max-width: 80em;
  margin-right: auto;
  margin-left: auto;
  left: 0;
  right: 0;
  max-width: 1300px; }

.top-block {
  background-color: #3c3567;
  background-image: radial-gradient(ellipse at 0% bottom, rgba(124, 0, 213, 0.6) 0%, rgba(118, 72, 160, 0) 60%), radial-gradient(ellipse at 90% bottom, #4437a7 0%, rgba(82, 63, 140, 0) 80%);
  text-align: center;
  background-repeat: no-repeat;
  background-size: 102%;
  background-position: bottom center;
  color: white;
  padding-top: 10em;
  padding-bottom: 4em;
  zoom: 1; }
  .top-block:before, .top-block:after {
    content: "\0020";
    display: block;
    height: 0;
    overflow: hidden; }
  .top-block:after {
    clear: both; }

.top-block--no-bg,
.top-block--black-bg {
  padding-bottom: 0;
  color: #2d343f;
  background: none; }
  .top-block--no-bg .top-block__byline,
  .top-block--black-bg .top-block__byline {
    color: #495258; }

.top-block--black-bg .top-block__headline {
  color: #e9e9e9; }

.top-block--black-bg .top-block__byline {
  color: #a5a5a5; }

.top-block--black-bg::before,
.top-block--no-bg::before {
  content: "";
  position: absolute;
  top: 0;
  display: block;
  widtH: 100%;
  z-index: 0;
  background-color: #3c3567;
  background-image: radial-gradient(ellipse at 0% bottom, rgba(124, 0, 213, 0.6) 0%, rgba(118, 72, 160, 0) 60%), radial-gradient(ellipse at 90% bottom, #4437a7 0%, rgba(82, 63, 140, 0) 80%);
  height: 6em; }

.top-block__inner {
  max-width: 1300px;
  zoom: 1;
  margin: 0 auto; }
  .top-block__inner:before, .top-block__inner:after {
    content: "\0020";
    display: block;
    height: 0;
    overflow: hidden; }
  .top-block__inner:after {
    clear: both; }

.top-block__headline,
.top-block__byline {
  float: left;
  width: 88.88889%;
  margin-right: 5.55556%;
  margin-left: 5.55556%; }
  @media (min-width: 60.0625em) {
    .top-block__headline,
    .top-block__byline {
      width: 95%;
      margin-right: 2.5%;
      margin-left: 2.5%; } }
  @media (min-width: 36.0625em) and (max-width: 60em) {
    .top-block__headline,
    .top-block__byline {
      width: 93.33333%;
      margin-right: 3.33333%;
      margin-left: 3.33333%; } }
  @media (min-width: 36.0625em) {
    .top-block__headline,
    .top-block__byline {
      display: block;
      text-align: left; } }

.top-block__byline {
  color: #CDD1E8;
  font-size: 1.3em;
  margin-bottom: 0; }

@media (min-width: 36.0625em) {
  .top-block--short-width .top-block__byline,
  .top-block--short-width .top-block__headline {
    float: left;
    width: 38.88889%;
    margin-right: 5.55556%;
    margin-left: 5.55556%; } }
  @media (min-width: 36.0625em) and (min-width: 60.0625em) {
    .top-block--short-width .top-block__byline,
    .top-block--short-width .top-block__headline {
      width: 45%;
      margin-right: 2.5%;
      margin-left: 2.5%; } }
  @media (min-width: 36.0625em) and (min-width: 36.0625em) and (max-width: 60em) {
    .top-block--short-width .top-block__byline,
    .top-block--short-width .top-block__headline {
      width: 43.33333%;
      margin-right: 3.33333%;
      margin-left: 3.33333%; } }

.main-footer {
  padding-top: 4em;
  padding-bottom: 4em;
  background-color: #3c3567;
  background-image: radial-gradient(ellipse at 0% bottom, rgba(124, 0, 213, 0.6) 0%, rgba(118, 72, 160, 0) 60%), radial-gradient(ellipse at 90% bottom, #4437a7 0%, rgba(82, 63, 140, 0) 80%);
  color: #CDD1E8;
  position: absolute;
  left: 0;
  bottom: 0;
  height: 12em;
  width: 100%; }

.main-footer__cta {
  float: left;
  width: 88.88889%;
  margin-right: 5.55556%;
  margin-left: 5.55556%; }
  @media (min-width: 0) and (max-width: 36em) {
    .main-footer__cta {
      text-align: center; } }
  @media (min-width: 60.0625em) {
    .main-footer__cta {
      width: 95%;
      margin-right: 2.5%;
      margin-left: 2.5%; } }
  @media (min-width: 36.0625em) and (max-width: 60em) {
    .main-footer__cta {
      width: 93.33333%;
      margin-right: 3.33333%;
      margin-left: 3.33333%; } }

.main-footer__contact-button {
  text-decoration: none;
  padding: 0.5em 1em;
  border: 1px solid;
  color: #ebeeff;
  text-transform: uppercase;
  letter-spacing: 1px; }
  .main-footer__contact-button:hover {
    background: white;
    color: #7c60cb;
    border-color: white; }

.main-header__nav-list {
  list-style-type: none;
  padding: 0;
  text-align: center;
  margin-top: 0.75em;
  widtH: 100%; }
  @media (min-width: 36.0625em) {
    .main-header__nav-list {
      float: left;
      width: 88.88889%;
      margin-right: 5.55556%;
      margin-left: 5.55556%;
      margin-top: 2em;
      text-align: left; } }
  @media (min-width: 36.0625em) and (min-width: 60.0625em) {
    .main-header__nav-list {
      width: 95%;
      margin-right: 2.5%;
      margin-left: 2.5%; } }
  @media (min-width: 36.0625em) and (min-width: 36.0625em) and (max-width: 60em) {
    .main-header__nav-list {
      width: 93.33333%;
      margin-right: 3.33333%;
      margin-left: 3.33333%; } }

.main-header__nav-item {
  display: inline-block; }
  @media (min-width: 36.0625em) {
    .main-header__nav-item {
      display: block;
      float: left; } }

.main-header__nav-link {
  color: white;
  text-transform: uppercase;
  text-decoration: none;
  font-family: 'nudista-web', Arial, sans-serif;
  letter-spacing: 0.05em;
  margin: 0 10px; }
  @media (min-width: 36.0625em) {
    .main-header__nav-link {
      margin-right: 2em; } }
  .main-header__nav-link:hover {
    color: #CDD1E8; }

.button {
  height: 48px;
  line-height: 48px;
  text-transform: none;
  letter-spacing: 0;
  font-size: 1em;
  background: linear-gradient(#9244ff, #4b38b1);
  color: white;
  border: 0;
  text-transform: uppercase;
  letter-spacing: 0.02em; }

.button--grey {
  background: linear-gradient(#ffffff, #e9e9e9);
  border: 0;
  color: #662cb8;
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2); }

.home-featured {
  padding-top: 4em;
  padding-bottom: 4em;
  background: linear-gradient(195deg, #373a3f 0%, #000000 100%);
  /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */ }

.home-skills .interface-header {
  margin-bottom: 1em; }

.home-featured__container {
  zoom: 1;
  max-width: 1300px;
  margin: 0 auto; }
  .home-featured__container:before, .home-featured__container:after {
    content: "\0020";
    display: block;
    height: 0;
    overflow: hidden; }
  .home-featured__container:after {
    clear: both; }

.home-featured__project {
  display: block;
  position: relative;
  text-decoration: none;
  float: left;
  width: 88.88889%;
  margin-right: 5.55556%;
  margin-left: 5.55556%;
  overflow: hidden;
  background: white;
  color: #495258;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.15); }
  @media (min-width: 60.0625em) {
    .home-featured__project {
      width: 28.33333%;
      margin-right: 2.5%;
      margin-left: 2.5%; } }
  @media (min-width: 36.0625em) and (max-width: 60em) {
    .home-featured__project {
      width: 93.33333%;
      margin-right: 3.33333%;
      margin-left: 3.33333%; } }

.home-featured__project:hover .home-featured__bottom {
  color: #7c60cb; }

.home-featured__image {
  width: 100%;
  display: block; }

.home-featured__bottom {
  text-align: center;
  position: relative;
  font-size: 0.8em;
  padding: 1.5em; }

.home-featured__title {
  font-size: 1.5em;
  margin: 0; }

.home-featured__title,
.home-featured__description {
  position: relative;
  top: 0;
  margin-bottom: 0; }

.home-skills {
  padding-bottom: 4em;
  padding-top: 4em;
  zoom: 1;
  max-width: 1300px;
  margin: 0 auto; }
  .home-skills:before, .home-skills:after {
    content: "\0020";
    display: block;
    height: 0;
    overflow: hidden; }
  .home-skills:after {
    clear: both; }

.home-skills__listings,
.home-skills__blogs {
  float: left;
  width: 88.88889%;
  margin-right: 5.55556%;
  margin-left: 5.55556%; }
  @media (min-width: 60.0625em) {
    .home-skills__listings,
    .home-skills__blogs {
      width: 45%;
      margin-right: 2.5%;
      margin-left: 2.5%; } }
  @media (min-width: 36.0625em) and (max-width: 60em) {
    .home-skills__listings,
    .home-skills__blogs {
      width: 93.33333%;
      margin-right: 3.33333%;
      margin-left: 3.33333%; } }

.home-skills__blogs {
  margin-top: 4em; }
  @media (min-width: 60.0625em) {
    .home-skills__blogs {
      margin-top: 0; } }

.home-skills__blog-title {
  margin-bottom: 0;
  font-size: 2em; }

.home-skills__blog-date {
  margin-bottom: 0;
  color: #b5b5b5; }

.home-cta {
  text-align: center;
  padding-top: 4em;
  padding-bottom: 4em; }

.home-cta__message {
  font-size: 1.3em; }

.home-cta__button {
  margin-top: 0.5em;
  font-size: 1em; }

main.portfolio {
  background: linear-gradient(195deg, #373a3f 0%, #000000 100%);
  /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
  min-height: calc(100vh - 12em); }

.portfolio-entry {
  max-width: 1300px;
  zoom: 1;
  margin: 0 auto;
  padding-top: 4em; }
  .portfolio-entry:before, .portfolio-entry:after {
    content: "\0020";
    display: block;
    height: 0;
    overflow: hidden; }
  .portfolio-entry:after {
    clear: both; }

.portfolio-entry__text {
  float: left;
  width: 30.55556%;
  margin-right: 5.55556%;
  margin-left: 5.55556%; }
  @media (min-width: 60.0625em) {
    .portfolio-entry__text {
      width: 36.66667%;
      margin-right: 2.5%;
      margin-left: 2.5%; } }
  @media (min-width: 36.0625em) and (max-width: 60em) {
    .portfolio-entry__text {
      width: 35%;
      margin-right: 3.33333%;
      margin-left: 3.33333%; } }

.portfolio-entry__main-image {
  display: none; }
  @media (min-width: 36.0625em) {
    .portfolio-entry__main-image {
      display: block;
      padding: 0;
      margin-top: 0;
      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.2);
      margin-bottom: 0;
      float: left;
      width: 38.88889%;
      margin-right: 5.55556%;
      margin-left: 5.55556%;
      float: right; } }
  @media (min-width: 36.0625em) and (min-width: 60.0625em) {
    .portfolio-entry__main-image {
      width: 45%;
      margin-right: 2.5%;
      margin-left: 2.5%; } }
  @media (min-width: 36.0625em) and (min-width: 36.0625em) and (max-width: 60em) {
    .portfolio-entry__main-image {
      width: 43.33333%;
      margin-right: 3.33333%;
      margin-left: 3.33333%; } }
  @media (min-width: 36.0625em) {
      .portfolio-entry__main-image img {
        width: 100%;
        display: block; } }

.portfolio-entry__gallery-image {
  float: left;
  width: 88.88889%;
  margin-right: 5.55556%;
  margin-left: 5.55556%;
  margin-top: 0;
  margin-bottom: 4em; }
  @media (min-width: 60.0625em) {
    .portfolio-entry__gallery-image {
      width: 95%;
      margin-right: 2.5%;
      margin-left: 2.5%; } }
  @media (min-width: 36.0625em) and (max-width: 60em) {
    .portfolio-entry__gallery-image {
      width: 93.33333%;
      margin-right: 3.33333%;
      margin-left: 3.33333%; } }
  .portfolio-entry__gallery-image img {
    width: 100%;
    display: block; }

.blog-entries__item {
  float: left;
  width: 88.88889%;
  margin-right: 5.55556%;
  margin-left: 5.55556%; }
  @media (min-width: 60.0625em) {
    .blog-entries__item {
      width: 45%;
      margin-right: 2.5%;
      margin-left: 2.5%; } }
  @media (min-width: 36.0625em) and (max-width: 60em) {
    .blog-entries__item {
      width: 93.33333%;
      margin-right: 3.33333%;
      margin-left: 3.33333%; } }

.blog-entries__item,
.home-skills__blog {
  display: block;
  margin-bottom: 2em;
  color: #495258;
  text-decoration: none; }
  .blog-entries__item:hover,
  .home-skills__blog:hover {
    opacity: 0.8;
    color: #495258; }

.blog-entries {
  max-width: 1300px;
  zoom: 1;
  margin: 0 auto;
  padding-top: 4em; }
  .blog-entries:before, .blog-entries:after {
    content: "\0020";
    display: block;
    height: 0;
    overflow: hidden; }
  .blog-entries:after {
    clear: both; }

.blog-entry {
  zoom: 1;
  max-width: 1300px;
  margin: 0 auto;
  padding-top: 4em;
  padding-bottom: 4em; }
  .blog-entry:before, .blog-entry:after {
    content: "\0020";
    display: block;
    height: 0;
    overflow: hidden; }
  .blog-entry:after {
    clear: both; }
  .blog-entry .blog {
    float: left;
    width: 47.22222%;
    margin-right: 5.55556%;
    margin-left: 5.55556%; }
    @media (min-width: 60.0625em) {
      .blog-entry .blog {
        width: 53.33333%;
        margin-right: 2.5%;
        margin-left: 2.5%; } }
    @media (min-width: 36.0625em) and (max-width: 60em) {
      .blog-entry .blog {
        width: 51.66667%;
        margin-right: 3.33333%;
        margin-left: 3.33333%; } }

/*# sourceMappingURL=data:application/json;base64, */
